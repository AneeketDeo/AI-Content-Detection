import streamlit as st
import os
import sys
import tempfile
from PIL import Image
import time
import torch

# Prevent Streamlit from trying to introspect torch.classes
if hasattr(torch.classes, '__path__'):
    delattr(torch.classes, '__path__')

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import the agent system
from agent.agent_system import ContentDetectionAgent

# Initialize the agent
agent = ContentDetectionAgent()

# Set page configuration
st.set_page_config(
    page_title="AI-Generated Content Detector",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Main title and description
st.title("AI-Generated Content Detector")
st.markdown("""
This application helps you detect whether text or images were generated by AI.
Upload or paste content to analyze it using multiple detection techniques.
""")

# Create tabs for different content types
tab1, tab2 = st.tabs(["Text Analysis", "Image Analysis"])

# Text Analysis Tab
with tab1:
    st.header("Text Analysis")
    st.markdown("Paste text or upload a text file to analyze whether it was generated by AI.")
    
    # Text input options
    input_method = st.radio("Input Method:", ["Paste Text", "Upload File"], horizontal=True)
    
    if input_method == "Paste Text":
        text_input = st.text_area("Enter text to analyze:", height=200)
        analyze_button = st.button("Analyze Text", key="analyze_text_button")
        
        if analyze_button and text_input:
            # Show progress
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                # Update progress
                status_text.text("Initializing analysis...")
                progress_bar.progress(10)
                time.sleep(0.5)
                
                status_text.text("Analyzing text patterns...")
                progress_bar.progress(30)
                time.sleep(0.5)
                
                status_text.text("Calculating perplexity scores...")
                progress_bar.progress(50)
                time.sleep(0.5)
                
                status_text.text("Running transformer classification...")
                progress_bar.progress(70)
                time.sleep(0.5)
                
                status_text.text("Generating final results...")
                progress_bar.progress(90)
                
                # Perform analysis
                results = agent.process_input(text_input, input_type="text")
                
                # Complete progress
                progress_bar.progress(100)
                status_text.text("Analysis complete!")
                time.sleep(0.5)
                
                # Clear progress indicators
                progress_bar.empty()
                status_text.empty()
                
                # Display results
                st.success("Text analysis completed successfully!")
                
                # Create columns for layout
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    # Display main classification result
                    classification = results.get("classification", "unknown")
                    confidence = results.get("confidence", 0.0)
                    
                    if classification == "ai-generated":
                        st.markdown(f"### ü§ñ AI-Generated Content Detected")
                        st.markdown(f"**Confidence:** {confidence:.2f}")
                        st.progress(confidence)
                    elif classification == "human-written":
                        st.markdown(f"### üë§ Human-Written Content Detected")
                        st.markdown(f"**Confidence:** {confidence:.2f}")
                        st.progress(confidence)
                    else:
                        st.markdown(f"### ‚ùì Classification Uncertain")
                        st.markdown(f"**Confidence:** {confidence:.2f}")
                        st.progress(confidence)
                    
                    # Display explanation
                    st.subheader("Analysis Explanation")
                    st.markdown(results.get("explanation", "No explanation available."))
                
                with col2:
                    # Display suspicion score gauge
                    suspicion_score = results.get("suspicion_score", 0.0)
                    st.subheader("AI Suspicion Score")
                    
                    # Create a gauge-like visualization
                    st.markdown(
                        f"""
                        <div style="margin: 10px auto; width: 200px; height: 200px; position: relative;">
                            <div style="position: absolute; width: 100%; height: 100%; 
                                background: conic-gradient(
                                    {'red' if suspicion_score > 0.7 else 'orange' if suspicion_score > 0.3 else 'green'} {suspicion_score * 360}deg, 
                                    #f0f0f0 0deg
                                ); 
                                border-radius: 50%;">
                            </div>
                            <div style="position: absolute; width: 70%; height: 70%; 
                                background: white; border-radius: 50%; 
                                top: 15%; left: 15%; display: flex; 
                                align-items: center; justify-content: center;">
                                <span style="font-size: 24px; font-weight: bold;">{suspicion_score:.2f}</span>
                            </div>
                        </div>
                        """, 
                        unsafe_allow_html=True
                    )
                    
                    # Display key indicators
                    st.subheader("Key Indicators")
                    
                    # Extract indicators from different analyzers
                    indicators = []
                    for analyzer_name, analyzer_results in results.get("ai_indicators", {}).items():
                        for indicator_name, indicator_data in analyzer_results.items():
                            if isinstance(indicator_data, dict) and "is_suspicious" in indicator_data:
                                indicators.append({
                                    "name": f"{indicator_name}",
                                    "value": indicator_data.get("value", 0),
                                    "is_suspicious": indicator_data.get("is_suspicious", False)
                                })
                    
                    # Display indicators
                    for indicator in indicators[:5]:  # Show top 5 indicators
                        st.markdown(
                            f"{'üî¥' if indicator['is_suspicious'] else 'üü¢'} "
                            f"**{indicator['name']}**: {indicator['value']:.2f}"
                        )
                
                # Display detailed results in an expander
                with st.expander("View Detailed Analysis Results"):
                    # Display results from each analyzer
                    for analyzer_name, analyzer_results in results.get("detailed_results", {}).items():
                        st.subheader(f"{analyzer_name.replace('_', ' ').title()} Analysis")
                        
                        # Format the results nicely
                        st.json(analyzer_results)
                
                # Add download button for report
                if "report" in results:
                    st.download_button(
                        label="Download Analysis Report",
                        data=results["report"],
                        file_name="text_analysis_report.txt",
                        mime="text/plain"
                    )
                
            except Exception as e:
                # Handle errors
                progress_bar.empty()
                status_text.empty()
                st.error(f"Error analyzing text: {e}")
    
    else:  # Upload File
        uploaded_file = st.file_uploader("Upload a text file:", type=["txt", "md"])
        
        if uploaded_file is not None:
            # Read the file
            try:
                text_content = uploaded_file.read().decode("utf-8")
                
                st.text_area("File content:", text_content, height=150)
                analyze_button = st.button("Analyze File", key="analyze_file_button")
                
                if analyze_button:
                    # Show progress
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    try:
                        # Update progress
                        status_text.text("Initializing analysis...")
                        progress_bar.progress(10)
                        time.sleep(0.5)
                        
                        status_text.text("Analyzing text patterns...")
                        progress_bar.progress(30)
                        time.sleep(0.5)
                        
                        status_text.text("Calculating perplexity scores...")
                        progress_bar.progress(50)
                        time.sleep(0.5)
                        
                        status_text.text("Running transformer classification...")
                        progress_bar.progress(70)
                        time.sleep(0.5)
                        
                        status_text.text("Generating final results...")
                        progress_bar.progress(90)
                        
                        # Perform analysis
                        results = agent.process_input(text_content, input_type="text")
                        
                        # Complete progress
                        progress_bar.progress(100)
                        status_text.text("Analysis complete!")
                        time.sleep(0.5)
                        
                        # Clear progress indicators
                        progress_bar.empty()
                        status_text.empty()
                        
                        # Display results
                        st.success("Text analysis completed successfully!")
                        
                        # Create columns for layout
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            # Display main classification result
                            classification = results.get("classification", "unknown")
                            confidence = results.get("confidence", 0.0)
                            
                            if classification == "ai-generated":
                                st.markdown(f"### ü§ñ AI-Generated Content Detected")
                                st.markdown(f"**Confidence:** {confidence:.2f}")
                                st.progress(confidence)
                            elif classification == "human-written":
                                st.markdown(f"### üë§ Human-Written Content Detected")
                                st.markdown(f"**Confidence:** {confidence:.2f}")
                                st.progress(confidence)
                            else:
                                st.markdown(f"### ‚ùì Classification Uncertain")
                                st.markdown(f"**Confidence:** {confidence:.2f}")
                                st.progress(confidence)
                            
                            # Display explanation
                            st.subheader("Analysis Explanation")
                            st.markdown(results.get("explanation", "No explanation available."))
                        
                        with col2:
                            # Display suspicion score gauge
                            suspicion_score = results.get("suspicion_score", 0.0)
                            st.subheader("AI Suspicion Score")
                            
                            # Create a gauge-like visualization
                            st.markdown(
                                f"""
                                <div style="margin: 10px auto; width: 200px; height: 200px; position: relative;">
                                    <div style="position: absolute; width: 100%; height: 100%; 
                                        background: conic-gradient(
                                            {'red' if suspicion_score > 0.7 else 'orange' if suspicion_score > 0.3 else 'green'} {suspicion_score * 360}deg, 
                                            #f0f0f0 0deg
                                        ); 
                                        border-radius: 50%;">
                                    </div>
                                    <div style="position: absolute; width: 70%; height: 70%; 
                                        background: white; border-radius: 50%; 
                                        top: 15%; left: 15%; display: flex; 
                                        align-items: center; justify-content: center;">
                                        <span style="font-size: 24px; font-weight: bold;">{suspicion_score:.2f}</span>
                                    </div>
                                </div>
                                """, 
                                unsafe_allow_html=True
                            )
                            
                            # Display key indicators
                            st.subheader("Key Indicators")
                            
                            # Extract indicators from different analyzers
                            indicators = []
                            for analyzer_name, analyzer_results in results.get("ai_indicators", {}).items():
                                for indicator_name, indicator_data in analyzer_results.items():
                                    if isinstance(indicator_data, dict) and "is_suspicious" in indicator_data:
                                        indicators.append({
                                            "name": f"{indicator_name}",
                                            "value": indicator_data.get("value", 0),
                                            "is_suspicious": indicator_data.get("is_suspicious", False)
                                        })
                            
                            # Display indicators
                            for indicator in indicators[:5]:  # Show top 5 indicators
                                st.markdown(
                                    f"{'üî¥' if indicator['is_suspicious'] else 'üü¢'} "
                                    f"**{indicator['name']}**: {indicator['value']:.2f}"
                                )
                        
                        # Display detailed results in an expander
                        with st.expander("View Detailed Analysis Results"):
                            # Display results from each analyzer
                            for analyzer_name, analyzer_results in results.get("detailed_results", {}).items():
                                st.subheader(f"{analyzer_name.replace('_', ' ').title()} Analysis")
                                
                                # Format the results nicely
                                st.json(analyzer_results)
                        
                        # Add download button for report
                        if "report" in results:
                            st.download_button(
                                label="Download Analysis Report",
                                data=results["report"],
                                file_name="text_analysis_report.txt",
                                mime="text/plain"
                            )
                        
                    except Exception as e:
                        # Handle errors
                        progress_bar.empty()
                        status_text.empty()
                        st.error(f"Error analyzing text: {e}")
            
            except Exception as e:
                st.error(f"Error reading file: {e}")

# Image Analysis Tab
with tab2:
    st.header("Image Analysis")
    st.markdown("Upload an image to analyze whether it was generated by AI.")
    
    uploaded_image = st.file_uploader("Upload an image:", type=["jpg", "jpeg", "png", "webp"])
    
    if uploaded_image is not None:
        # Display the uploaded image
        image = Image.open(uploaded_image)
        st.image(image, caption="Uploaded Image", use_column_width=True)
        
        analyze_button = st.button("Analyze Image", key="analyze_image_button")
        
        if analyze_button:
            # Show progress
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                # Save uploaded image to a temporary file
                with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                    tmp_file.write(uploaded_image.getvalue())
                    temp_image_path = tmp_file.name
                
                # Update progress
                status_text.text("Initializing analysis...")
                progress_bar.progress(10)
                time.sleep(0.5)
                
                status_text.text("Analyzing frequency domain patterns...")
                progress_bar.progress(30)
                time.sleep(0.5)
                
                status_text.text("Analyzing texture and noise patterns...")
                progress_bar.progress(50)
                time.sleep(0.5)
                
                status_text.text("Running deep learning classification...")
                progress_bar.progress(70)
                time.sleep(0.5)
                
                status_text.text("Generating final results...")
                progress_bar.progress(90)
                
                # Perform analysis
                results = agent.process_input(temp_image_path, input_type="image")
                
                # Complete progress
                progress_bar.progress(100)
                status_text.text("Analysis complete!")
                time.sleep(0.5)
                
                # Clear progress indicators
                progress_bar.empty()
                status_text.empty()
                
                # Clean up temporary file
                os.unlink(temp_image_path)
                
                # Display results
                st.success("Image analysis completed successfully!")
                
                # Create columns for layout
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    # Display main classification result
                    classification = results.get("classification", "unknown")
                    confidence = results.get("confidence", 0.0)
                    
                    if classification == "ai-generated":
                        st.markdown(f"### ü§ñ AI-Generated Image Detected")
                        st.markdown(f"**Confidence:** {confidence:.2f}")
                        st.progress(confidence)
                    elif classification == "real-photo":
                        st.markdown(f"### üì∑ Real Photograph Detected")
                        st.markdown(f"**Confidence:** {confidence:.2f}")
                        st.progress(confidence)
                    else:
                        st.markdown(f"### ‚ùì Classification Uncertain")
                        st.markdown(f"**Confidence:** {confidence:.2f}")
                        st.progress(confidence)
                    
                    # Display explanation
                    st.subheader("Analysis Explanation")
                    st.markdown(results.get("explanation", "No explanation available."))
                    
                    # Display image metadata
                    if "metadata" in results:
                        st.subheader("Image Metadata")
                        metadata = results["metadata"]
                        st.markdown(f"**Dimensions:** {metadata.get('dimensions', 'Unknown')}")
                        st.markdown(f"**File Type:** {metadata.get('file_extension', 'Unknown')}")
                        st.markdown(f"**File Size:** {metadata.get('file_size', 0) / 1024:.1f} KB")
                
                with col2:
                    # Display suspicion score gauge
                    suspicion_score = results.get("suspicion_score", 0.0)
                    st.subheader("AI Suspicion Score")
                    
                    # Create a gauge-like visualization
                    st.markdown(
                        f"""
                        <div style="margin: 10px auto; width: 200px; height: 200px; position: relative;">
                            <div style="position: absolute; width: 100%; height: 100%; 
                                background: conic-gradient(
                                    {'red' if suspicion_score > 0.7 else 'orange' if suspicion_score > 0.3 else 'green'} {suspicion_score * 360}deg, 
                                    #f0f0f0 0deg
                                ); 
                                border-radius: 50%;">
                            </div>
                            <div style="position: absolute; width: 70%; height: 70%; 
                                background: white; border-radius: 50%; 
                                top: 15%; left: 15%; display: flex; 
                                align-items: center; justify-content: center;">
                                <span style="font-size: 24px; font-weight: bold;">{suspicion_score:.2f}</span>
                            </div>
                        </div>
                        """, 
                        unsafe_allow_html=True
                    )
                    
                    # Display key indicators
                    st.subheader("Key Indicators")
                    
                    # Extract indicators from different analyzers
                    indicators = []
                    for analyzer_name, analyzer_results in results.get("ai_indicators", {}).items():
                        for indicator_name, indicator_data in analyzer_results.items():
                            if isinstance(indicator_data, dict) and "is_suspicious" in indicator_data:
                                indicators.append({
                                    "name": f"{indicator_name}",
                                    "value": indicator_data.get("value", 0),
                                    "is_suspicious": indicator_data.get("is_suspicious", False)
                                })
                    
                    # Display indicators
                    for indicator in indicators[:5]:  # Show top 5 indicators
                        st.markdown(
                            f"{'üî¥' if indicator['is_suspicious'] else 'üü¢'} "
                            f"**{indicator['name']}**: {indicator['value']:.2f}"
                        )
                
                # Display detailed results in an expander
                with st.expander("View Detailed Analysis Results"):
                    # Display results from each analyzer
                    for analyzer_name, analyzer_results in results.get("detailed_results", {}).items():
                        st.subheader(f"{analyzer_name.replace('_', ' ').title()} Analysis")
                        
                        # Format the results nicely
                        st.json(analyzer_results)
                
                # Add download button for report
                if "report" in results:
                    st.download_button(
                        label="Download Analysis Report",
                        data=results["report"],
                        file_name="image_analysis_report.txt",
                        mime="text/plain"
                    )
                
            except Exception as e:
                # Handle errors
                progress_bar.empty()
                status_text.empty()
                st.error(f"Error analyzing image: {e}")
                
                # Clean up temporary file if it exists
                if 'temp_image_path' in locals():
                    try:
                        os.unlink(temp_image_path)
                    except:
                        pass

# Sidebar
st.sidebar.header("About")
st.sidebar.markdown("""
# AI-Generated Content Detector

This application helps you detect whether text or images were generated by AI using multiple analysis techniques:

**Text Analysis:**
- Stylometric Analysis
- Perplexity Scoring
- Transformer-based Classification

**Image Analysis:**
- Frequency Domain Analysis
- Texture and Noise Analysis
- Deep Learning Classification

## How It Works

The application uses an agentic system that autonomously determines input type, routes to appropriate analyzers, and provides detailed explanations of detection reasoning.

For more information, check out the [GitHub repository](https://github.com/yourusername/ai-content-detector).
""")

st.sidebar.markdown("---")
st.sidebar.markdown("¬© 2025 AI Content Detector")
